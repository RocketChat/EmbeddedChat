"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[492],{8787:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/EmbeddedChat-2022","metadata":{"permalink":"/EmbeddedChat/docs/blog/EmbeddedChat-2022","source":"@site/blog/EmbeddedChat-2022.md","title":"GSoC-2022","description":"Create a ready-to-go easy to embed mini-chat React component.","date":"2024-09-30T17:46:30.000Z","tags":[],"readingTime":3.965,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"nextItem":{"title":"Google Summer of Code 2023, RocketChat","permalink":"/EmbeddedChat/docs/blog/EmbeddedChat-2023"}},"content":"<div align=\\"center\\">\\n    <a href=\\"https://summerofcode.withgoogle.com/projects/#6521788818784256\\"><img src=\\"https://i.imgur.com/pgkUceb.png\\" width=\\"650\\" alt=\\"google-summer-of-code\\" /></a>\\n    <br />\\n    <b> \\n        <p>\\n        Create a ready-to-go easy to embed mini-chat React component.\\n        </p>\\n    </b>\\n</div>\\n\\n<p align=\\"center\\">\\n    <code> \\n        <a href=\\"#-project-abstract\\">Project Abstract</a>&nbsp;&nbsp;&nbsp;\\n        <a href=\\"#-deliverables\\">Deliverables</a>&nbsp;&nbsp;&nbsp;\\n        <a href=\\"#-demo\\">Demo</a>&nbsp;&nbsp;&nbsp;\\n        <a href=\\"#-contributions\\">Contributions</a>&nbsp;&nbsp;&nbsp;\\n        <a href=\\"#-blog\\">Blog</a>&nbsp;&nbsp;&nbsp;\\n        <a href=\\"#-mentor\\">Mentor</a>&nbsp;&nbsp;&nbsp;\\n        <a href=\\"#-links\\">Links</a>\\n    </code>\\n</p>\\n\\nI got a chance to work on a project called [EmbeddedChat](https://github.com/RocketChat/EmbeddedChat) which is an in-app chat solution to web applications needing a chat component to increase user engagement.\\n\\nFrom just an idea (proposal) to a complete product - 3 months of Google Summer of Code passed.\\n\\nI intend to maintain this repository as a final report summary of my GSoC work and a quick guide for all future GSoC aspirants.\\n\\n## \u2b50 Project Abstract\\n\\n**EmbeddedChat allows users to integrate RocketChat into their React web-based applications easily also providing an amazing developer experience while introducing in-app chat solutions.**\\n\\n## \ud83d\udea2 Deliverables\\n\\nThe following are the deliverables of this project:\\n\\n1.  Creation of UI using RocketChat Fuselage design system. [NEW]\\n2.  Providing real-time chat functionality using RocketChat node.js SDK. [NEW]\\n3.  Authentication using RocketChat\u2019s Google SSO with an additional choice for `<username, password>` login (if the user already has an account). [NEW]\\n4.  Adding EmojiOne Emoji Picker to the component to ensure cross-platform functioning of emojis.[NEW]\\n5.  Using Rocket.Chat\u2019s REST API to: [NEW]\\n-   Get channel details\\n-   Get the channel\u2019s pinned messages\\n-   Get the channel\u2019s starred messages\\n-   Get the channel attachments\\n-   Send a message to the channel\\n-   Get messages of the channel\\n6.  Providing the functionality to pin/star/react to any message and mention users. [NEW]\\n\\n**All of the above deliverables were completed within the GSoC period. Yay! \ud83c\udf89**\\n\\n## \ud83d\udcfa Demo\\n### Sneak Peak\\n![randomgifec](https://user-images.githubusercontent.com/73601258/189498365-90bcc80a-4fb1-461b-a89e-99f1f8d31d95.gif)\\n\\n### Providing real-time chat functionality using RocketChat node.js SDK\\n\\nhttps://user-images.githubusercontent.com/73601258/189498385-1346c5af-ec75-42a9-b864-f6f3b1e49d88.mp4\\n\\nhttps://user-images.githubusercontent.com/73601258/189498400-942f337a-0ee8-48e5-b539-70dc49d1e3e7.mp4\\n\\n### Authentication using RocketChat\u2019s Google SSO\\nhttps://user-images.githubusercontent.com/73601258/180390437-b28ceacb-7f3f-4b80-84c1-4e1709b6cd35.mp4\\n\\n### Adding EmojiOne Emoji Picker to the component to ensure cross-platform functioning of emojis.\\n![image](https://user-images.githubusercontent.com/73601258/189498628-119c0417-a8cd-4775-acdf-41fdd3b7bc62.png)\\n\\n### Using Rocket.Chat\u2019s REST API\\nTook an object-oriented programming approach to build this. Created an API wrapper that is super simple to set up.\\n[Here](https://github.com/RocketChat/EmbeddedChat/blob/main/src/lib/api.js) is the code.\\n\\n### Providing the functionality to pin/star/react to any message and mention users.\\n\\nhttps://user-images.githubusercontent.com/73601258/189498498-602ddade-2883-43ac-91b7-9f63dc41cf84.mp4\\n\\nhttps://user-images.githubusercontent.com/73601258/189498502-1310fb1c-293e-4bb4-a208-7b523dfdd23f.mp4\\n\\n## \ud83d\ude80 Contributions\\n\\n### PRs\\n\\n<div align=\\"center\\">\\n\\n| PR Link   | Description  |\\n| :-----------: | :------------------------------------:|\\n| [PR #1](https://github.com/RocketChat/EmbeddedChat/pull/1) | [NEW] initialize project and base setup |\\n| [PR #4](https://github.com/RocketChat/EmbeddedChat/pull/4) | NEW: issue and pr template |\\n| [PR #5](https://github.com/RocketChat/EmbeddedChat/pull/5) | IMPROVE: Responsiveness |\\n| [PR #7](https://github.com/RocketChat/EmbeddedChat/pull/7) | NEW: sending and receiving msgs (the oop way) |\\n| [PR #11](https://github.com/RocketChat/EmbeddedChat/pull/11) | Parsing emojis in message box |\\n| [PR #12](https://github.com/RocketChat/EmbeddedChat/pull/12) | NEW: AUTH (google SSO) |\\n| [PR #15](https://github.com/RocketChat/EmbeddedChat/pull/15) | NEW: Development documentation |\\n| [PR #26](https://github.com/RocketChat/EmbeddedChat/pull/26) | [IMPROVE] UI/UX improvements |\\n| [PR #40](https://github.com/RocketChat/EmbeddedChat/pull/40) | FIX: when host is https set useSSL as true |\\n| [PR #41](https://github.com/RocketChat/EmbeddedChat/pull/41) | [IMPROVE] more options to be present whether or not its fullscreen |\\n| [PR #46](https://github.com/RocketChat/EmbeddedChat/pull/46) | FIX: when cookies are there assume user present |\\n| [PR #47](https://github.com/RocketChat/EmbeddedChat/pull/47) | CHORE: remove tech.co.html |\\n| [PR #48](https://github.com/RocketChat/EmbeddedChat/pull/48) | Handling attachments |\\n| [PR #44](https://github.com/RocketChat/EmbeddedChat/pull/44) | NEW: react to message |\\n| [PR #42](https://github.com/RocketChat/EmbeddedChat/pull/42) | NEW: Pin and star messages\\n| [PR #39](https://github.com/RocketChat/EmbeddedChat/pull/39) | Add format to all files\\n| [PR #29](https://github.com/RocketChat/EmbeddedChat/pull/29) | NEW: CI/CD Pipeline to deploy the package\\n\\n</div>\\n    \\n### My overall contributions at Rocket.Chat\\n    \\nBesides my GSoC project I have been contributing prolifically to other Rocket.Chat projects - [RocketChat.js.SDK](https://github.com/RocketChat/Rocket.Chat.js.SDK), [RC4Community](https://github.com/RocketChat/RC4Community), [fuselage](https://github.com/RocketChat/fuselage), [Rocket.Chat](https://github.com/RocketChat/Rocket.Chat).\\n    \\n## \ud83d\ude0e Blog\\n    \\nI have been writing blogs regarding my progress in GSoC. \\n - [My journey with open source and lessons learned](https://dev.to/sidmohanty11/my-journey-with-open-source-and-lessons-learned-30e7)\\n - [[PART-I] GSoC 2022 | Rocket.Chat | EmbeddedChat](https://dev.to/sidmohanty11/part-i-gsoc-2022-rocketchat-embeddedchat-3njh)\\n - [[PART-II] GSoC 2022 | Rocket.Chat | EmbeddedChat](https://dev.to/sidmohanty11/part-ii-gsoc-2022-rocketchat-embeddedchat-15g3)\\n - [Final Part: GSoC 2022 | Rocket.Chat | EmbeddedChat](https://dev.to/sidmohanty11/final-part-gsoc-2022-rocketchat-embeddedchat-37g8)\\n\\n## \ud83c\udf93 Mentor\\n\\nA big big thank you to my mentor for the guidance before and throughout GSoC. \ud83d\ude4f \\n\\nI learned beyond GSoC from him and am forever grateful to be mentored by him.\\n\\n- **Rohan Lekhwani** - [GitHub](https://github.com/RonLek). [LinkedIn](https://www.linkedin.com/in/rohanlekhwani)\\n\\n## \ud83d\udd17 Links\\n\\n- Read my EmbeddedChat project proposal that got me accepted to GSoC [here](https://docs.google.com/document/d/1YeAz-hzv-7NY5HApraz0lOCNj2_Vc-ys_w2qp3qd-nQ/edit?usp=sharing).\\n\\n- I also complemented it with Figma designs. Check them out [here](https://www.figma.com/file/hj0BqzAvB15zBv7A8fMYc9/RocketChat-ReactJS-Component?node-id=0%3A1).\\n\\n- My GSoC Presentation can be found [here](https://docs.google.com/presentation/d/1hNO-iGlA0nnyHS5o6XlgwGaYP7IgOtcHdg--HCFNABY/edit?usp=sharing).\\n\\n- Watch the above presentation in video - [here](https://www.youtube.com/watch?v=gcB5c6cvg9w&t=6s) !\\n\\n## \u2764\ufe0f Support\\nLearned something new today? Reciprocate the love. \u2b50 this repo for good karma.\\n    \\n## \ud83d\udcac Connect With Me    \\nWant to discuss about GSoC / Rocket.Chat / Open-source ? Let\'s connect!\\n<div align=\\"center\\">\\n\\n| **Student** | Sidharth Mohanty |\\n|:--------------------|:-------------------|\\n| **Organization** | [Rocket.Chat](https://rocket.chat/) |\\n| **Project** | [EmbeddedChat](https://docs.rocket.chat/contributors/annual-contribution-programs/google-summer-of-code/google-summer-of-code-2022#rocket.chat-reactjs-fullstack-component) |\\n| **GitHub** | [@sidmohanty11](https://github.com/sidmohanty11) |\\n| **LinkedIn** | [sidmohanty11](https://www.linkedin.com/in/sidmohanty11) |\\n| **Twitter** | [sidmohanty11](https://www.twitter.com/sidmohanty11) |\\n| **Blogs** | [sidmohanty11](https://dev.to/sidmohanty11) |\\n| **Website** | [sidmohanty11.github.io](https://sidmohanty11.github.io) |\\n| **Email** | <a href=\\"mailto:sidmohanty11@gmail.com\\">sidmohanty11@gmail.com</a> |\\n| **Rocket.Chat** | [sidharth.mohanty](https://open.rocket.chat/direct/sidharth.mohanty) |\\n       \\n</div>"},{"id":"/EmbeddedChat-2023","metadata":{"permalink":"/EmbeddedChat/docs/blog/EmbeddedChat-2023","source":"@site/blog/EmbeddedChat-2023.md","title":"Google Summer of Code 2023, RocketChat","description":"Create a ready-to-go easy to embed mini-chat React component.","date":"2024-09-30T17:46:30.000Z","tags":[],"readingTime":5.9,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"GSoC-2022","permalink":"/EmbeddedChat/docs/blog/EmbeddedChat-2022"},"nextItem":{"title":"Google Summer of Code 2024, RocketChat","permalink":"/EmbeddedChat/docs/blog/EmbeddedChat-2024"}},"content":"<div>\\n    <a href=\\"https://summerofcode.withgoogle.com/projects/#6521788818784256\\"><img src=\\"https://i.imgur.com/pgkUceb.png\\" width=\\"650\\" alt=\\"google-summer-of-code\\" /></a>\\n    <br />\\n    <b> \\n        <p>\\n        Create a ready-to-go easy to embed mini-chat React component.\\n        </p>\\n    </b>\\n</div>\\n\\nI worked on a project called [EmbeddedChat](https://github.com/RocketChat/EmbeddedChat) which is an in-app chat solution that utilizes the RocketChat chat engine through its REST and real-time APIs to support powerful chat features like reactions, online presence, typing status, threads, and much more.\\n\\nI would maintain this repository as the final report summary of my GSoC 2023 project and a quick guide for all future GSoC aspirants.\\n\\n## \u2b50 Project Abstract\\nThe goal of the project is to make a ready-to-use chat solution that could be integrated into any website, web app, or app. This project was a major refactoring and enhancement for the EmbeddedChat 2022 project.\\n\\n## \ud83d\udea2 Deliverables\\n- Improve authentication - support all OAuth services\\n- Move to a mono repo - auth, api, react, react-native, HTML embed\\n- HTML embed feature\\n- Theming\\n- Improving API\\n- Support for slash commands\\n- Migrating from the fuselage to our own minimal components\\n\\n## Demo\\n\\n### Sneak Peak\\nEmbeddedChat integrated into my esportsweb.in website.\\n![EmbeddedChat Reac component](https://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/e42fd503-c7f7-4f30-abbb-9123d9c87257)\\n\\n\\n### Moving to mono repo\\nEmbeddedChat\'s new mono repo structure\\n![structure](https://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/ae7593e1-5479-465a-ab9a-e73c6ee85cd6)\\n\\n- *auth* - The auth package includes functions to easily log into a Rocket chat server. Though it is used by embeddedchat\'s react and react-native client, developers can use this package for their own use cases.\\n- *api* - The api package includes functions that are all required to create a chat application using the Rocketchat server. It has functions like connect, login, sendMesage, pinMessage, starMessage, deleteMessage, triggerBlockAction, etc. to perform various operations. One can listen to new/updated message events by attaching event listeners using `addMessageListener`. There are other event listeners which could be added using `addMessageDeleteListener`, `addTypingStatusListener`, `addActionTriggeredListener`, `addUiInteractionListener`.\\n- *react* - The react package includes the react components to integrate EmbeddedChat.\\n- *react-native* - The react-native project aims at using EmbeddedChat in react native mobile apps.\\n- *htmembed* - With this project EmbeddedChat could be integrated into any web app by simply embedding an HTML snippet.\\n\\n### Storybook setup\\n![Screenshot from 2023-09-25 12-09-07](https://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/5e7e6f05-6ead-4d3b-bb0e-22befacf3cf1)\\n\\n\\n### HTML Embedd Feature\\nSimple integrate embedded chat by pasting html snippet into your website\\n```\\n<div id=\\"embeddedchat\\"></div>\\n      <script src=\\"http://127.0.0.1:4001/embeddedchat.js\\"><\/script>\\n      <script>\\n        // all props for the EmbeddedChat of @embeddedchat/react will go here\\n\\t\\t// The config will be directly applied as props for the EmbeddedChat Component\\n        const config = {\\n            host: \'http://localhost:3000\',\\n    \\t\\troomId: \'GENERAL\',\\n            isClosable: true,\\n            setClosableState: true,\\n            moreOpts: true,\\n            channelName: \'general\',\\n            anonymousMode: true,\\n            headerColor: \'white\',\\n            toastBarPosition: \'bottom-end\',\\n            showRoles: true,\\n            showAvatar: false,\\n            enableThreads: true,\\n            auth: {\\n                flow: \'MANAGED\',\\n            },\\n        }\\n        EmbeddedChat.renderInElementWithId(config, \'embeddedchat\')\\n      <\/script>\\n```\\nHTML Embedded in action\\n![htmlembed](https://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/8e803ef2-e4a0-48b9-a931-cb1e778d794d)\\n\\n\\n### Theming\\nWe can customize EmbeddedChat by passing a custom theme object. Hence, it could take the look and feel of the app or website. We can also customize components by custom stylesheet or passing custom class names through the theme object.\\n![Customizing using theme](https://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/96c191c5-a27f-4999-8fd4-96b0b5035493)\\n\\n\\n### Improving API\\nOur `api` package exposes the `EmbeddedChatApi` class. It comes with a bunch of APIs that could be used to login, send, pin, edit, star or delete message, attach listeners for realtime events. It has the following structure:\\n```\\nclass EmbeddedChatApi {\\n    host: string;\\n    rid: string;\\n    rcClient: Rocketchat;\\n    onMessageCallbacks: ((message: any) => void)[];\\n    onMessageDeleteCallbacks: ((messageId: string) => void)[];\\n    onTypingStatusCallbacks: ((users: string[]) => void)[];\\n    onActionTriggeredCallbacks: ((data: any) => void)[];\\n    onUiInteractionCallbacks: ((data: any) => void)[];\\n    typingUsers: string[];\\n    auth: RocketChatAuth;\\n    constructor(host: string, rid: string, { getToken, saveToken, deleteToken, autoLogin }: IRocketChatAuthOptions);\\n    setAuth(auth: RocketChatAuth): void;\\n    getAuth(): RocketChatAuth;\\n    getHost(): string;\\n    googleSSOLogin(signIn: Function, acsCode: string): Promise<any>;\\n    login(userOrEmail: string, password: string, code: string): Promise<{\\n        status: string;\\n        me: any;\\n    } | undefined>;\\n    logout(): Promise<void>;\\n    connect(): Promise<void>;\\n    addMessageListener(callback: (message: any) => void): Promise<void>;\\n    removeMessageListener(callback: (message: any) => void): Promise<void>;\\n    addMessageDeleteListener(callback: (messageId: string) => void): Promise<void>;\\n    removeMessageDeleteListener(callback: (messageId: string) => void): Promise<void>;\\n    addTypingStatusListener(callback: (users: string[]) => void): Promise<void>;\\n    removeTypingStatusListener(callback: (users: string[]) => void): Promise<void>;\\n    addActionTriggeredListener(callback: (data: any) => void): Promise<void>;\\n    removeActionTriggeredListener(callback: (data: any) => void): Promise<void>;\\n    addUiInteractionListener(callback: (data: any) => void): Promise<void>;\\n    removeUiInteractionListener(callback: (data: any) => void): Promise<void>;\\n    handleTypingEvent({ typingUser, isTyping }: {\\n        typingUser: string;\\n        isTyping: boolean;\\n    }): void;\\n    updateUserNameThroughSuggestion(userid: string): Promise<any>;\\n    updateUserUsername(userid: string, username: string): Promise<any>;\\n    channelInfo(): Promise<any>;\\n    close(): Promise<void>;\\n    getMessages(anonymousMode?: boolean, options?: {\\n        query?: object | undefined;\\n        field?: object | undefined;\\n    }): Promise<any>;\\n    getThreadMessages(tmid: string): Promise<any>;\\n    getChannelRoles(): Promise<any>;\\n    sendTypingStatus(username: string, typing: boolean): Promise<void>;\\n    sendMessage(message: any, threadId: string): Promise<any>;\\n    deleteMessage(msgId: string): Promise<any>;\\n    updateMessage(msgId: string, text: string): Promise<any>;\\n    starMessage(mid: string): Promise<any>;\\n    unstarMessage(mid: string): Promise<any>;\\n    getStarredMessages(): Promise<any>;\\n    getPinnedMessages(): Promise<any>;\\n    pinMessage(mid: string): Promise<any>;\\n    unpinMessage(mid: string): Promise<any>;\\n    reactToMessage(emoji: string, messageId: string, shouldReact: string): Promise<any>;\\n    reportMessage(messageId: string, description: string): Promise<any>;\\n    findOrCreateInvite(): Promise<any>;\\n    sendAttachment(file: File, fileName: string, fileDescription?: string, threadId?: undefined): Promise<any>;\\n    me(): Promise<any>;\\n    getChannelMembers(): Promise<any>;\\n    getSearchMessages(text: string): Promise<any>;\\n    triggerBlockAction({ type, actionId, appId, rid, mid, viewId, container, ...rest }: any): Promise<any>;\\n    getCommandsList(): Promise<any>;\\n    execCommand({ command, params }: {\\n        command: string;\\n        params: string;\\n    }): Promise<any>;\\n}\\n```\\nDemo playgroud for api package\\n![playground_api](https://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/af0952dd-d9de-4ab4-9a12-baaea9b19c6f)\\n\\n\\n### Support for slash commands\\nWe have worked on supporting slash commands along with any UI interactions they perform.\\n\\n\\nhttps://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/b4c0dd2e-e77f-49d5-8eb5-f27b1e011817\\n\\n### React Native\\n![react native](https://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/2d7e84cc-747d-4a23-acef-8a79363c12bd)\\n\\n\\n### Improving Auth\\nWe now support token-based authentication for EmbeddedChat. An app can pass the access token of the services that are configured in RocketChat to EmbeddedChat. It would be useful when the app does not want to show any additional login UI for EmbeddedChat.\\n\\n\\nhttps://github.com/abhinavkrin/GSoC-RocketChat-2023/assets/15830206/8c36b974-927f-4b12-bd62-2830763ec681\\n\\n\\n\\n## \ud83d\ude80 Contributions\\n### Pull requests to Embeddedchat\\n| PR ID  | Title with Link                                        |\\n| --- | ----------------------------------------------------- |\\n| 217 | [IMPROVE] Project-restructure [Link](https://github.com/RocketChat/EmbeddedChat/pull/217) |\\n| 218 | React bootstrap [Link](https://github.com/RocketChat/EmbeddedChat/pull/218) |\\n| 222 | Theming Foundation Set up [Link](https://github.com/RocketChat/EmbeddedChat/pull/222) |\\n| 223 | [NEW] Button replacement for fuselage [Link](https://github.com/RocketChat/EmbeddedChat/pull/223) |\\n| 224 | UI refactoring/box [Link](https://github.com/RocketChat/EmbeddedChat/pull/224) |\\n| 226 | Improve/auth + ActionButton/Icon/Input Component [Link](https://github.com/RocketChat/EmbeddedChat/pull/226) |\\n| 227 | New/added apis [Link](https://github.com/RocketChat/EmbeddedChat/pull/227) |\\n| 228 | New/slash commands+UI kit+theming [Link](https://github.com/RocketChat/EmbeddedChat/pull/228) |\\n| 229 | New/html embed [Link](https://github.com/RocketChat/EmbeddedChat/pull/229) |\\n| 230 | New/message component+avatar [Link](https://github.com/RocketChat/EmbeddedChat/pull/230) |\\n| 232 | React Native Project [Link](https://github.com/RocketChat/EmbeddedChat/pull/232) |\\n| 233 | Fix/new icon components [Link](https://github.com/RocketChat/EmbeddedChat/pull/233) |\\n\\n[View all PRs to EmbeddedChat](https://github.com/RocketChat/EmbeddedChat/pulls?q=is%3Apr+author%3Aabhinavkrin)\\n\\n### My overall contributions to RocketChat\\nBesides EmbeddedChat I also contributed to other RocketChat Projects [GSoC Community Hub](https://github.com/RocketChat/GSoC-Community-Hub/pulls?q=is%3Apr+author%3Aabhinavkrin), [RC4Community](https://github.com/RocketChat/RC4Community/pulls?q=is%3Apr+author%3Aabhinavkrin), [RC4Conferences](https://github.com/RocketChat/RC4Conferences/pulls?q=is%3Apr+author%3Aabhinavkrin).\\n\\n## \ud83c\udf93 Mentor\\n\\nA big big thank you to my mentor for the guidance and support before and throughout GSoC. \ud83d\ude4f \\nI learned beyond GSoC from him and am forever grateful to be mentored by him.\\n- **Sidharth Mohanty** - [GitHub](https://github.com/sidmohanty11), [LinkedIn](https://www.linkedin.com/in/sidmohanty11/), [Twitter](https://twitter.com/sidmohanty11) \\n\\n## \ud83d\udd17 Links\\n\\n- Read my EmbeddedChat project proposal that got me accepted to GSoC [here](https://docs.google.com/document/d/1N6oySFsLxA9fSooTp8pHlCjnJwzVYfC8Cbems-z_uMY/edit?usp=sharing).\\n\\n- My GSoC Presentation can be found [here](https://docs.google.com/presentation/d/1be7EnIjVjPN1vx11I06GeNqkDlWuynKZRKRYX9_ePOA/edit?usp=sharing).\\n\\n- Watch the above presentation in video - [here](https://www.youtube.com/watch?v=Y5bbkxRyu4o) !\\n\\n## \u2764\ufe0f Support\\nLearned something new today? Reciprocate the love. \u2b50 this repo for good karma.\\n\\n## \ud83d\udcac Connect With Me    \\nWant to discuss about GSoC / Rocket.Chat / Open-source ? Let\'s connect!\\n<div align=\\"center\\">\\n\\n| **Student** | Abhinav Kumar |\\n|:--------------------|:-------------------|\\n| **Organization** | [Rocket.Chat](https://rocket.chat/) |\\n| **Project** | [EmbeddedChat 2023](https://summerofcode.withgoogle.com/programs/2023/projects/sUXGt89N) |\\n| **GitHub** | [@abhinavkrin](https://github.com/abhinavkrin) |\\n| **LinkedIn** | [abhinavkrin](https://www.linkedin.com/in/abhinavkrin) |\\n| **Twitter** | [abhinavkr_in](https://www.twitter.com/abhinavkr_in) |\\n| **Website** | [avitechlab.com](https://avitechlab.com) |\\n| **Email** | <a href=\\"mailto:abhinav@avitechlab.com\\">abhinav@avitechlab.com</a> |\\n| **Rocket.Chat** | [abhinav.kumar30](https://open.rocket.chat/direct/abhinav.kumar30) |\\n       \\n</div>"},{"id":"/EmbeddedChat-2024","metadata":{"permalink":"/EmbeddedChat/docs/blog/EmbeddedChat-2024","source":"@site/blog/EmbeddedChat-2024.md","title":"Google Summer of Code 2024, RocketChat","description":"\ud83d\udcd8 Introduction","date":"2024-09-30T17:46:30.000Z","tags":[],"readingTime":7.87,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Google Summer of Code 2023, RocketChat","permalink":"/EmbeddedChat/docs/blog/EmbeddedChat-2023"}},"content":"<div align=\\"center\\">\\n    <a href=\\"https://summerofcode.withgoogle.com/programs/2024/projects/eVxOuKT2\\"><img src=\\"https://github.com/user-attachments/assets/9705b330-c4f9-4061-8c71-114cfb5153bb\\" width=\\"100%\\" alt=\\"google-summer-of-code\\"/></a>\\n</div>\\n\\n## \ud83d\udcd8 Introduction\\n\\nDuring my GSoC period, I worked on EmbeddedChat, a lightweight chat widget that uses the RocketChat engine\'s REST and real-time APIs to deliver comprehensive chat features, customizable options, and attractive theming capabilities.\\n\\n## \u2b50 Project Abstract\\n\\nThe goal of this project was to develop a ready-to-use chat solution that could be integrated into any website, web app, or mobile app. In EmbeddedChat 2024, my focus was on enhancing the UI by making components modular and providing pre-built themes. The project also sought to ensure security through HTTP-Only cookie-based authentication, using RC-app as a bridge. I also worked on improving configuration capabilities, enabling the instance to be configurable through RC-app, and developed a real-time layout editor with drag-and-drop features, among other enhancements.\\n\\n## \ud83d\udea2 Deliverables\\n\\n- Redesign Embedded Chat for consistent CSS, logic separation, and monorepo component management.\\n- Upgrade theming system with prebuilt themes and enhanced customization.\\n- Boost security with HTTP-Only cookie authentication in Embedded Chat via RC-app.\\n- Enable admins to easily adjust all Embedded Chat settings in Rocket.Chat Workspace.\\n- Offer a drag-and-drop editor for admin UI configuration without coding.\\n- Enhance UI-Kit integration.\\n- Fix bugs and improve documentation.\\n\\n## \ud83d\udcf9 Showcase\\n\\nExplore a demonstration of the latest features and improvements. See firsthand how the updates enhance functionality and user experience.\\n\\n### Sneak Peek\\n\\nHere\'s a brief preview of EmbeddedChat integrated into a website, designed to demonstrate the functionality of RC apps without the need for local setup.\\n\\n<p align=\\"center\\">\\n  <img src=\\"https://github.com/user-attachments/assets/1f5da63d-b82e-497d-bade-cf88716297e8\\" width=\\"100%\\" alt=\\"EC Integration\\"/>\\n</p>\\n\\n### Code Refactor: Separation of Concerns\\n\\nKey updates to the EmbeddedChat repository include:\\n\\n1. **Separation of Components from Views**: Standalone components have been moved to a `ui-element` monorepo with its own Storybook.\\n\\n2. **CSS Styles Separation**: CSS styles are now in a `component.styles.js` file, providing a clear separation from core logic.\\n\\n3. **Markup and UI-Kit Separation**: Markups and the UI Kit are organized into a separate library (monorepo).\\n\\n<p align=\\"center\\">\\n  <img src=\\"https://github.com/user-attachments/assets/b983d6c9-8190-4d5e-8a40-52588b07e7c3\\" width=\\"100%\\" alt=\\"CSS styles in component.styles.js\\"/>\\n  <br/>\\n  CSS styles are now in `component.styles.js`\\n</p>\\n\\n<p align=\\"center\\">\\n  <img src=\\"https://github.com/user-attachments/assets/77663956-2c74-4e54-a337-181abff094eb\\" width=\\"100%\\" alt=\\"Separation into monorepo\\"/>\\n  <br/>\\n  Separation into monorepo for `ui-elements`, `markups`, and `ui-kit`\\n</p>\\n\\nThe video below illustrates the development, usage, and setup of the ui-elements monorepo, and it also shows that EmbeddedChat functions as expected following this separation:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/BEpQYl9Y_z0\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n\\n### UI Theming Upgrade: Prebuilt Themes and Style Variants\\n\\nThe theming system has been enhanced with several prebuilt themes, ensuring a consistent use of theme colors across the repository. This replaces the previously inconsistent and varied color schemes.\\n\\nOnce the Storybook is running, you can explore and experiment with various designs within the `Design Variants` folder, including `RCVariant`, `Bubble Variant`, and `Modern Variant`. These options enable you to either use the prebuilt themes or draw inspiration to create your own. Below are images and videos demonstrating the different variants; note that the videos also highlight fixes introduced with these PRs:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/XtOgYnM-F58\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/D_rskRbEatk\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n<p align=\\"center\\">\\n  <img src=\\"https://github.com/RocketChat/EmbeddedChat/assets/78961432/826cf806-1d9c-4626-a3c2-4f00d8557389\\" width=\\"100%\\" alt=\\"Automatically generated colors in usernames in dark mode + popup instead of sidebar\\"/>\\n  <br/>\\n  Automatically generated colors in usernames in dark mode + popup instead of sidebar\\n</p>\\n\\n<p align=\\"center\\">\\n  <img src=\\"https://github.com/RocketChat/EmbeddedChat/assets/78961432/b7efade3-b041-4311-a8a7-3e642b6f0de1\\" width=\\"100%\\" alt=\\"Automatically generated colors in usernames in light mode + popup instead of sidebar\\"/>\\n  <br/>\\n  Automatically generated colors in usernames in light mode + popup instead of sidebar\\n</p>\\n\\nThe theming system follows a convention similar to the ShadCN theming system. Users can generate themes from the ShadCN website or other sites that follow the same convention, then use the `packages/react/tools/theme-generator.js` to convert the theme into a supported format and apply it via the theme prop.\\n\\nA demonstration video is available here:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/bB2zzlHhIdY\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nFor further details on theming, you can visit the [documentation](https://github.com/RocketChat/EmbeddedChat/blob/develop/packages/docs/theming.md) or check out the [technical guide](https://github.com/RocketChat/EmbeddedChat/blob/develop/packages/docs/theming_technical.md) for insights on how theming is implemented in the repository.\\n\\n### Enhanced Authentication with HTTP-Only Cookies\\n\\nEmbeddedChat authentication security has been enhanced through the use of HTTP-Only cookies for re-authentication. This approach adds an extra layer of protection by preventing access via inline JavaScript, thereby reducing the risk of potential attacks. To use this storage method, the EmbeddedChat RC app must be installed on the RC server, which acts as a bridge for saving and retrieving tokens. Once installed, you can test the feature using the Storybook `SecureAuth` option or by setting the `secure: true` prop during EmbeddedChat setup.\\n\\nA video demonstration is available here:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/k1-X-9l67H4\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nFor more information on authentication, refer to the [authentication guide](https://github.com/RocketChat/EmbeddedChat/blob/develop/packages/docs/authentication.md).\\n\\n### UI-Kit Improvement\\n\\nI enhanced the UI-Kit integration within EmbeddedChat by migrating it to a monorepo as a separate library. Key improvements include:\\n\\n- **Modularized Structure**: Reorganized the UI-Kit folder structure for improved modularity.\\n- **Action Processing**: Added state and view update logic, along with parsing methods.\\n- **Contextual Bar Support**: Implemented support for the contextual bar.\\n- **Component Enhancements**: Added support for static select and multi-select elements with custom components and new component stories.\\n\\nTesting was conducted across three distinct RC apps, with video demonstrations provided:\\n\\n1. **Reminder RC App**:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/OAertgChvCA\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n2. **Notion RC App**:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/nYxgsXtod50\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n3. **News Aggregation App** (tested multi-select functionality):\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/LtZESjEnEqA\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n### EmbeddedChat Remote Configurability\\n\\nI have added support for remote configuration of EmbeddedChat props, including themes, via the EmbeddedChat RC App. The app can also validate CSS dimensions provided in the settings. To try this feature, set up the RC app in your Rocket.Chat workspace and use the Storybook option `WithRemoteOpt` or pass the `remoteOpt: true` prop during EmbeddedChat setup.\\n\\nThe following videos demonstrate its usage:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/72OBBWMAMOk\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/rkuSF9qOG2U\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nTo set up the EmbeddedChat RC App, follow this guide: [EmbeddedChat RC App Setup](https://github.com/RocketChat/EmbeddedChat/blob/develop/packages/docs/ec_rc_setup.md).\\n\\n### Layout Editor\\n\\nI also worked on a new sub-project called `layout-editor` during GSoC to enhance EmbeddedChat customizability. This tool enables users to customize the EmbeddedChat layout in real-time with drag-and-drop features, color configuration, and more. Once satisfied with their design, users can click the `Generate Theme` button to create a theme object, which can be applied by passing it into the theme prop during EmbeddedChat setup or by configuring it remotely if EmbeddedChat RC App is properly set up.\\n\\nA video demonstration showcases the features:\\n\\n<iframe width=\\"100%\\" height=\\"392\\" src=\\"https://www.youtube.com/embed/vhxsGopMGA8\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n\\nTo learn more about the layout editor, visit the guide: [Layout Editor Guide](https://github.com/RocketChat/EmbeddedChat/blob/develop/packages/docs/layout_editor.md).\\n\\n## \ud83d\ude80 Contributions\\n\\n### GSoC Contributions to EmbeddedChat\\n\\n| PR ID | Title                                                                                                                      |\\n| ----- | -------------------------------------------------------------------------------------------------------------------------- |\\n| 576   | Refactor, Restructure, and Fix Bugs ([#576](https://github.com/RocketChat/EmbeddedChat/pull/576))                          |\\n| 579   | UI Theming Upgrade and RC-like Redesign ([#579](https://github.com/RocketChat/EmbeddedChat/pull/579))                      |\\n| 581   | Add Curved Bubble Variant Styles ([#581](https://github.com/RocketChat/EmbeddedChat/pull/581))                             |\\n| 584   | More Customization: Popup/Sidebar and Username Color Options ([#584](https://github.com/RocketChat/EmbeddedChat/pull/584)) |\\n| 589   | Fix ChatInput Bugs, Improve Experience ([#589](https://github.com/RocketChat/EmbeddedChat/pull/589))                       |\\n| 590   | Enhance Security with HTTP-Only Cookies ([#590](https://github.com/RocketChat/EmbeddedChat/pull/590))                      |\\n| 591   | Remove Unused Files ([#591](https://github.com/RocketChat/EmbeddedChat/pull/591))                                          |\\n| 593   | UI-Kit Integration and Action Processing ([#593](https://github.com/RocketChat/EmbeddedChat/pull/593))                     |\\n| 594   | Auto Login Improvements and Loading Screens ([#594](https://github.com/RocketChat/EmbeddedChat/pull/594))                  |\\n| 599   | Remote EmbeddedChat Settings Configuration ([#599](https://github.com/RocketChat/EmbeddedChat/pull/599))                   |\\n| 601   | Add CSS Dimension Validation ([#601](https://github.com/RocketChat/EmbeddedChat/pull/601))                                 |\\n| 602   | Documentation Improvements ([#602](https://github.com/RocketChat/EmbeddedChat/pull/602))                                   |\\n| 604   | Separate Component Monorepo (UI-Elements) ([#604](https://github.com/RocketChat/EmbeddedChat/pull/604))                    |\\n| 606   | Reduce Package Size of Component Monorepo ([#606](https://github.com/RocketChat/EmbeddedChat/pull/606))                    |\\n| 607   | Add Real-Time Layout Editor with Drag-and-Drop ([#607](https://github.com/RocketChat/EmbeddedChat/pull/607))               |\\n\\n[See all PRs for EmbeddedChat](https://github.com/RocketChat/EmbeddedChat/pulls?q=is%3Apr+author%3ASpiral-Memory)\\n\\nIn addition to working on EmbeddedChat, I\'ve made contributions to several other RocketChat projects. Check out my pull requests for [Apps.Notion](https://github.com/RocketChat/Apps.Notion/pulls?q=+is%3Apr+author%3ASpiral-Memory), [Rocket.Chat](https://github.com/RocketChat/Rocket.Chat/pulls?q=+is%3Apr+author%3ASpiral-Memory), and [Fuselage](https://github.com/RocketChat/fuselage/pulls?q=+is%3Apr+author%3ASpiral-Memory).\\n\\n## \ud83c\udf93 A Special Thanks to My Mentor\\n\\nThank you so much to Sidharth Mohanty for being an amazing mentor during GSoC. He\u2019s been incredibly receptive to ideas, always available to help, and provides great guidance during our meetups. His encouragement to explore new areas has made this experience really rewarding. I\u2019ve learned a lot from him and truly appreciate all his support.\\n\\nYou can connect with him on [GitHub](https://github.com/sidmohanty11), [LinkedIn](https://www.linkedin.com/in/sidmohanty11/), and [Twitter](https://twitter.com/sidmohanty11).\\n\\n## \ud83d\udd17 Links\\n\\nDownload and read my EmbeddedChat project proposal, which led to my GSoC acceptance, [here](https://github.com/Spiral-Memory/GSoC-Proposal/blob/main/Embedded%20Chat%202024%20GSoC%20Proposal%20%5BWinning%5D.pdf).\\n\\n## \u2764\ufe0f Support\\n\\nEnjoyed what you learned today? Show your appreciation by starring this repo. \u2b50\\n\\n## \ud83d\udcac Let\'s Connect\\n\\nInterested in chatting about GSoC, Rocket.Chat, or open-source adventures? I\'m all ears!\\n\\n| **Role**           | **Zishan Ahmad \u2013 GSoC Participant**                                                      |\\n| :----------------- | :--------------------------------------------------------------------------------------- |\\n| **Affiliation**    | [Rocket.Chat](https://rocket.chat/)                                                      |\\n| **Project**        | [EmbeddedChat 2024](https://summerofcode.withgoogle.com/programs/2024/projects/eVxOuKT2) |\\n| **GitHub**         | [@Spiral-Memory](https://github.com/Spiral-Memory)                                       |\\n| **LinkedIn**       | [@zishanahmad72](https://www.linkedin.com/in/zishanahmad72/)                             |\\n| **Creative Space** | [spiral-memory.netlify.app](https://spiral-memory.netlify.app/)                          |\\n| **Email**          | [zishan.barun@gmail.com](mailto:zishan.barun@gmail.com)                                  |\\n| **Rocket.Chat**    | [zishan.ahmad](https://open.rocket.chat/direct/zishan.ahmad)                             |\\n\\n## \ud83d\udccc Closing Notes\\n\\nThis repository contains the final report and serves as a guide for future contributors to the EmbeddedChat project, which was developed and improved during Google Summer of Code (GSoC) 2024. The final report details the solutions implemented during the project, while the guide provides insights and instructions for new contributors to effectively engage with and build upon the project\'s foundation."}]}}')}}]);